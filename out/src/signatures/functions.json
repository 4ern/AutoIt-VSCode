{
    "Abs": {
        "documentation": "Calculates the absolute value of a number.",
        "label": "Abs(expression)",
        "params": [{
            "label": "expression",
            "documentation": "Any valid numeric expression."
        }]
    },
    "ACos": {
        "documentation": "Calculates the arcCosine of a number.",
        "label": "ACos(expression)",
        "params": [{
            "label": "expression",
            "documentation": "Any value between -1 and 1 inclusive."
        }]
    },
    "AdlibRegister": {
        "documentation": "Registers an Adlib function.",
        "label": "AdlibRegister ( \"function\" [, time = 250] )",
        "params": [{
            "label": "\"function\"",
            "documentation": "The name of the adlib function to be registered."
        }, {
            "label": "time",
            "documentation": "[optional] how often in milliseconds to call the function. Default is 250 ms."
        }]
    },
    "AdlibUnRegister": {
        "documentation": "Registers an Adlib function.",
        "label": "AdlibUnRegister ( [\"function\"] )",
        "params": [{
            "label": "function",
            "documentation": "[optional] The name of the adlib function to be Unregistered. See remarks for more information."
        }]
    },
    "Asc": {
        "documentation": "Returns the unicode code of a character.",
        "label": "Asc ( \"char\" )",
        "params": [{
            "label": "char",
            "documentation": "The character to get the code for. If a string is used, the code for the first character is given."
        }]
    },
    "AscW": {
        "documentation": "Returns the ASCII code of a character.",
        "label": "AscW ( \"char\" )",
        "params": [{
            "label": "char",
            "documentation": "The character to get the code for. If a string is used, the code for the first character is given."
        }]
    },
    "ASin": {
        "label": "ASin(expression)",
        "documentation": "Calculates the arcsine of a number.",
        "params": [{
            "label": "expression",
            "documentation": "Any value between -1 and 1 (inclusive)."
        }]
    },
    "Assign": {
        "label": "Assign ( \"varname\", \"data\" [, flag = 0] )",
        "documentation": "Assigns a variable by name with the data.",
        "params": [{
            "label": "varname",
            "documentation": "The name of the variable you wish to assign. Cannot be an array element and must only contain letters, digits and underscore characters (as per normal variable naming conventions)."
        }, {
            "label": "data",
            "documentation": "The data you wish to assign to the variable."
        }, {
            "label": "flag",
            "documentation": "[optional] controls the way that variables are assigned"
        }]
    },
    "ATan": {
        "label": "ATan(expression)",
        "documentation": "Calculates the arctangent of a number.",
        "params": [{
            "label": "expression",
            "documentation": "Any valid numeric expression."
        }]
    },
    "AutoItSetOption": {
        "label": "AutoItSetOption ( \"option\" [, param] )",
        "documentation": "Changes the operation of various AutoIt functions/parameters.",
        "params": [{
            "label": "option",
            "documentation": "The option to change."
        }, {
            "label": "param",
            "documentation": "[optional] The value to assign to the option. The type and meaning vary by option. See remarks below. If the param is not provided, then the function just returns the value already assigned to the option. The keyword Default can be used for the parameter to reset the option to its default value."
        }]
    },
    "AutoItWinSetTitle": {
        "label": "AutoItWinSetTitle ( \"newtitle\" )",
        "documentation": "Changes the title of the AutoIt window.",
        "params": [{
            "label": "newtitle",
            "documentation": "The new title to give to the window."
        }]
    },
    "Beep": {
        "label": "Beep ( [Frequency = 500 [, Duration = 1000]] )",
        "documentation": "Plays back a beep to the user.",
        "params": [{
            "label": "Frequency",
            "documentation": "[optional] The frequency of the beep in hertz. Can be anywhere from 37 through 32,767 (0x25 through 0x7FFF). Default is 500 Hz."
        }, {
            "label": "Duration",
            "documentation": "[optional] The length of the beep in milliseconds. Default = 1000 ms."
        }]
    },
    "Binary": {
        "label": "Binary ( expression )",
        "documentation": "Returns the binary representation of an expression.",
        "params": [{
            "label": "expression",
            "documentation": "An expression to convert into binary/byte data."
        }]
    },
    "BinaryLen": {
        "label": "BinaryLen ( binary )",
        "documentation": "Returns the number of bytes in a binary variant.",
        "params": [{
            "label": "binary",
            "documentation": "The binary data to evaluate."
        }]
    },
    "BinaryMid": {
        "label": "BinaryMid ( binary, start [, count] )",
        "documentation": "Returns the number of bytes in a binary variant.",
        "params": [{
            "label": "binary",
            "documentation": "The binary data to evaluate."
        }, {
            "label": "start",
            "documentation": "The byte position to start. (1 = first byte)"
        }, {
            "label": "count",
            "documentation": "[optional] The number of bytes to extract. By default the entire remainder of the binary data."
        }]
    },
    "BinaryToString": {
        "label": "BinaryToString ( expression [, flag = 1] )",
        "documentation": "Converts a binary variant into a string.",
        "params": [{
            "label": "expression",
            "documentation": "An expression to convert into a string."
        }, {
            "label": "flag",
            "documentation": "[optional] Changes how the binary data is converted"
        }]
    },
    "BitAND": {
        "label": "BitAND (value1, value2 [, value n])",
        "documentation": "Performs a bitwise AND operation.",
        "params": [{
            "label": "value1",
            "documentation": "The first number."
        }, {
            "label": "value2",
            "documentation": "The second number."
        }, {
            "label": "value n",
            "documentation": "[optional] The nth number - up to 255 values can be specified."
        }]
    },
    "BitNOT": {
        "label": "BitNOT ( value )",
        "documentation": "Performs a bitwise NOT operation.",
        "params": [{
            "label": "value",
            "documentation": "The number to operate on."
        }]
    },
    "BitOR": {
        "label": "BitOR ( value1, value2 [, value n] )",
        "documentation": "Performs a bitwise OR operation.",
        "params": [{
            "label": "value1",
            "documentation": "The first number."
        }, {
            "label": "value2",
            "documentation": "The second number."
        }, {
            "label": "value n",
            "documentation": "[optional] The nth number - up to 255 values can be specified."
        }]
    },
    "BitRotate": {
        "label": "BitRotate ( value [, shift = 1 [, size = \"W\"]] )",
        "documentation": "Performs a bitwise OR operation.",
        "params": [{
            "label": "value",
            "documentation": "The number to be operated on."
        }, {
            "label": "shift",
            "documentation": "[optional] Number of bits to rotate to the left (negative numbers rotate right). If not given, the default is 1."
        }, {
            "label": "size",
            "documentation": "[optional] A string that determines the rotation size, the default is (16 bits). "
        }]
    },
    "BitShift": {
        "label": "BitShift ( value, shift )",
        "documentation": "Performs a bit shifting operation.",
        "params": [{
            "label": "value",
            "documentation": "The number to be shifted."
        }, {
            "label": "shift",
            "documentation": "Number of bits to shift to the right (negative numbers shift left)."
        }]
    },
    "BitXOR": {
        "label": "BitXOR ( value1, value2 [, value n] )",
        "documentation": "Performs a bitwise exclusive OR (XOR) operation.",
        "params": [{
            "label": "value1",
            "documentation": "The first number."
        }, {
            "label": "value2",
            "documentation": "The second number."
        }, {
            "label": "value n",
            "documentation": "[optional] The nth number - up to 255 values can be specified."
        }]
    },
    "BlockInput": {
        "label": "BlockInput ( flag )",
        "documentation": "Disable/enable the mouse and keyboard.",
        "params": [{
            "label": "flag",
            "documentation": "$BI_DISABLE (1) = Disable user input / $BI_ENABLE (0) = Enable user input"
        }]
    },
    "Break": {
        "label": "Break ( mode )",
        "params": [{
            "label": "mode",
            "documentation": "Sets the script break mode: $BREAK_ENABLE (1) = Break is enabled (user can quit) (default) / $BREAK_DISABLE (0) = Break is disabled (user cannot quit)"
        }]
    },
    "Call": {
        "label": "Call ( \"function\" [, paramN] )",
        "documentation": "Calls a user-defined or built-in function contained in first parameter.",
        "params": [{
                "label": "function",
                "documentation": "The name of function or function to call."
            },
            {
                "label": "paramN",
                "documentation": "Argument(s) that will be passed to the function being invoked."
            }
        ]
    },
    "CDTray": {
        "label": "CDTray ( \"drive\", \"status\" )",
        "documentation": "Opens or closes the CD tray.",
        "params": [{
                "label": "drive",
                "documentation": "The drive letter of the CD tray to control, in the format D:, E:, etc."
            },
            {
                "label": "status",
                "documentation": "Specifies if you want the CD tray to be open or closed"
            }
        ]
    },
    "Ceiling": {
        "label": "Ceiling ( expression )",
        "documentation": "Returns a number rounded up to the next integer.",
        "params": [{
            "label": "expression",
            "documentation": "Any valid numeric expression."
        }]
    },
    "Chr": {
        "label": "Chr ( ASCIIcode )",
        "documentation": "Returns a character corresponding to an ASCII code.",
        "params": [{
            "label": "ASCIIcode",
            "documentation": "An ASCII code in the range 0-255 (e.g., 65 returns the capital letter A)."
        }]
    },
    "ChrW": {
        "label": "ChrW ( UNICODEcode  )",
        "documentation": "Returns a character corresponding to a unicode code.",
        "params": [{
            "label": "UNICODEcode",
            "documentation": "A unicode code in the range 0-65535 (e.g., 65 returns the capital letter A)."
        }]
    },
    "ClipPut": {
        "label": "ClipPut(\"value\")",
        "params": [{
            "label": "\"value\"",
            "documentation": "The text to write to the clipboard."
        }]
    },
    "ConsoleRead": {
        "label": "ConsoleRead ( [peek = False [, binary = False]] )",
        "documentation": "Read from the STDIN stream of the AutoIt script process.",
        "params": [{
            "label": "peek",
            "documentation": "[optional] If True the function does not remove the read characters from the stream."
        }, {
            "label": "binary",
            "documentation": "[optional] If True the function reads the data as binary instead of text (default is text)."
        }]
    },
    "ConsoleWrite": {
        "label": "ConsoleWrite ( \"data\" )",
        "documentation": "Writes data to the STDOUT stream. Some text editors can read this stream as can other programs which may be expecting data on this stream.",
        "params": [{
            "label": "data",
            "documentation": "The data you wish to output. This may either be text or binary."
        }]
    },
    "ConsoleWriteError": {
        "label": "ConsoleWriteError ( \"data\" )",
        "documentation": "Writes data to the STDERR stream. Some text editors can read this stream as can other programs which may be expecting data on this stream.",
        "params": [{
            "label": "data",
            "documentation": "The data you wish to output. This may either be text or binary."
        }]
    },
    "ControlClick": {
        "label": "ControlClick ( \"title\", \"text\", controlID [, button = \"left\" [, clicks = 1 [, x [, y]]]] )",
        "documentation": "Sends a mouse click command to a given control.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }, {
            "label": "button",
            "documentation": "[optional] The button to click, \"left\", \"right\", \"middle\", \"main\", \"menu\", \"primary\", \"secondary\". Default is the left button."
        }, {
            "label": "clicks",
            "documentation": "[optional] The number of times to click the mouse. Default is 1."
        }, {
            "label": "x",
            "documentation": "[optional] The x position to click within the control. Default is center."
        }, {
            "label": "y",
            "documentation": "[optional] The y position to click within the control. Default is center."
        }]
    },
    "ControlCommand": {
        "label": "ControlCommand ( \"title\", \"text\", controlID, \"command\" [, \"option\"] )",
        "documentation": "Sends a command to a control.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }, {
            "label": "command",
            "documentation": "The command to send to the control."
        }, {
            "label": "option",
            "documentation": "[optional] Additional parameter required by some commands."
        }]
    },
    "ControlDisable": {
        "label": "ControlDisable ( \"title\", \"text\", controlID )",
        "documentation": "Disables or \"grays-out\" a control.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }]
    },
    "ControlEnable": {
        "label": "ControlEnable ( \"title\", \"text\", controlID )",
        "documentation": "Enables a \"grayed-out\" control.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }]
    },
    "ControlFocus": {
        "label": "ControlFocus ( \"title\", \"text\", controlID )",
        "documentation": "Sets input focus to a given control on a window.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }]
    },
    "ControlGetFocus": {
        "label": "ControlGetFocus ( \"title\" [, \"text\"] )",
        "documentation": "Returns the ControlRef# of the control that has keyboard focus within a specified window.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "[optional] The text of the window to access."
        }]
    },
    "ControlGetHandle": {
        "label": "ControlGetHandle ( \"title\", \"text\", controlID )",
        "documentation": "Retrieves the internal handle of a control.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }]
    },
    "ControlGetPos": {
        "label": "ControlGetPos ( \"title\", \"text\", controlID )",
        "documentation": "Retrieves the position and size of a control relative to its window.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }]
    },
    "ControlGetText": {
        "label": "ControlGetText ( \"title\", \"text\", controlID )",
        "documentation": "Retrieves text from a control.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }]
    },
    "ControlHide": {
        "label": "ControlHide ( \"title\", \"text\", controlID )",
        "documentation": "Hides a control.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }]
    },
    "ControlListView": {
        "label": "ControlListView ( \"title\", \"text\", controlID, \"command\" [, option1 [, option2]] )",
        "documentation": "Sends a command to a ListView32 control.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }, {
            "label": "command",
            "documentation": "The command to send to the control."
        }, {
            "label": "option1",
            "documentation": "[optional] Additional parameter required by some commands."
        }, {
            "label": "option2",
            "documentation": "[optional] Additional parameter required by some commands."
        }]
    },
    "ControlMove": {
        "label": "ControlMove ( \"title\", \"text\", controlID, x, y [, width [, height]] )",
        "documentation": "Moves a control within a window.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }, {
            "label": "x",
            "documentation": "X coordinate to move to relative to the window client area."
        }, {
            "label": "y",
            "documentation": "Y coordinate to move to relative to the window client area."
        }, {
            "label": "width",
            "documentation": "[optional] New width of the window."
        }, {
            "label": "height",
            "documentation": "[optional] New height of the window."
        }]
    },
    "ControlSend": {
        "label": "ControlSend ( \"title\", \"text\", controlID, \"string\" [, flag = 0] )",
        "documentation": "Sends a string of characters to a control.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }, {
            "label": "string",
            "documentation": "String of characters to send to the control."
        }, {
            "label": "flag",
            "documentation": "[optional] Changes how \"keys\" is processed"
        }]
    },
    "ControlSetText": {
        "label": "ControlSetText  ( \"title\", \"text\", controlID, \"new text\" [, flag = 0] )",
        "documentation": "Sets text of a control.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }, {
            "label": "new text",
            "documentation": "The new text to be set into the control."
        }, {
            "label": "flag",
            "documentation": "[optional] when different from 0 (default) will force the target window to be redrawn."
        }]
    },
    "ControlShow": {
        "label": "ControlShow ( \"title\", \"text\", controlID )",
        "documentation": "Shows a control that was hidden.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }]
    },
    "ControlTreeView": {
        "label": "ControlTreeView ( \"title\", \"text\", controlID, \"command\" [, option1] )",
        "documentation": "Sends a command to a TreeView32 control.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }, {
            "label": "command",
            "documentation": "The command to send to the control."
        }, {
            "label": "option1",
            "documentation": "[optional] Additional parameter required by some commands."
        }]
    },
    "Cos": {
        "label": "Cos ( expression )",
        "documentation": "Calculates the cosine of a number.",
        "params": [{
            "label": "expression",
            "documentation": "Value in radians."
        }]
    },
    "Dec": {
        "label": "Dec ( \"hex\" [, flag = 0] )",
        "documentation": "Returns a numeric representation of a hexadecimal string.",
        "params": [{
            "label": "hex",
            "documentation": "The hexadecimal string to convert."
        }, {
            "label": "flag",
            "documentation": "[optional] Defines behavior."
        }]
    },
    "DirCopy": {
        "label": "DirCopy ( \"source dir\", \"dest dir\" [, flag = 0] )",
        "documentation": "Copies a directory and all sub-directories and files (Similar to xcopy).",
        "params": [{
            "label": "source dir",
            "documentation": "Path of the source directory (with no trailing backslash). e.g. \"C:\\Path1\""
        }, {
            "label": "dest dir",
            "documentation": "Path of the destination dir (with no trailing backslash). e.g. \"C:\\Path_Copy\""
        }, {
            "label": "flag",
            "documentation": "[optional] this flag determines whether to overwrite files if they already exist"
        }]
    },
    "DirCreate": {
        "label": "DirCreate ( \"path\" )",
        "documentation": "Creates a directory/folder.",
        "params": [{
            "label": "path",
            "documentation": "Path of the directory to create."
        }]
    },
    "DirGetSize": {
        "label": "DirGetSize ( \"path\" [, flag = 0] )",
        "documentation": "Returns the size in bytes of a given directory.",
        "params": [{
            "label": "path",
            "documentation": "Path of the directory to create."
        }, {
            "label": "flag",
            "documentation": "[optional] this flag determines the behaviour and result of the function"
        }]
    },
    "DirMove": {
        "label": "DirMove ( \"source dir\", \"dest dir\" [, flag = 0] )",
        "documentation": "Copies a directory and all sub-directories and files (Similar to xcopy).",
        "params": [{
            "label": "source dir",
            "documentation": "Path of the source directory (with no trailing backslash). e.g. \"C:\\Path1\""
        }, {
            "label": "dest dir",
            "documentation": "Path of the destination dir (with no trailing backslash). e.g. \"C:\\Path_Copy\""
        }, {
            "label": "flag",
            "documentation": "[optional] this flag determines whether to overwrite files if they already exist"
        }]
    },
    "DirRemove": {
        "label": "DirRemove ( \"path\" [, recurse = 0] )",
        "documentation": "Deletes a directory/folder.",
        "params": [{
            "label": "path",
            "documentation": "Path of the directory to remove."
        }, {
            "label": "recurse",
            "documentation": "[optional] Use this flag to specify if you want to delete sub-directories too."
        }]
    },
    "DllCall": {
        "label": "DllCall ( \"dll\", \"return type\", \"function\" [, type1, param1 [, type n, param n]] )",
        "documentation": "Dynamically calls a function in a DLL.",
        "params": [{
            "label": "dll",
            "documentation": "The filename of the DLL to use. e.g. \"user32.dll\". A handle obtained from DllOpen can also be used (See Remarks)."
        }, {
            "label": "return type",
            "documentation": "The return type of the function"
        }, {
            "label": "function",
            "documentation": "The name, eg. \"MessageBox\" or the ordinal value, e.g. 62, of the function in the DLL to call."
        }, {
            "label": "type1",
            "documentation": "[optional] The type of the parameter "
        }, {
            "label": "param1",
            "documentation": "[optional] The actual parameter"
        }, {
            "label": "type n",
            "documentation": "[optional] The type of the nth parameter"
        }, {
            "label": "param n",
            "documentation": "[optional] The actual nth parameter"
        }]
    },
    "DllCallAddress": {
        "label": "DllCallAddress ( \"return type\", address  [, type1, param1 [, type n, param n]] )",
        "documentation": "Dynamically calls a function in a DLL.",
        "params": [{
            "label": "return type",
            "documentation": "The return type of the function"
        }, {
            "label": "address",
            "documentation": "The address of a function."
        }, {
            "label": "type1",
            "documentation": "[optional] The type of the parameter "
        }, {
            "label": "param1",
            "documentation": "[optional] The actual parameter"
        }, {
            "label": "type n",
            "documentation": "[optional] The type of the nth parameter"
        }, {
            "label": "param n",
            "documentation": "[optional] The actual nth parameter"
        }]
    },
    "DllCallbackFree": {
        "documentation": "Frees a previously created handle created with DllCallbackRegister.",
        "label": "DllCallbackFree ( handle )",
        "params": [{
            "label": "handle",
            "documentation": "The DllCallback handle, as returned by a previous call to DllCallbackRegister()."
        }]
    },
    "DllCallbackGetPtr": {
        "documentation": "Returns the pointer to a callback function that can be passed to the Win32 API.",
        "label": "DllCallbackGetPtr ( handle )",
        "params": [{
            "label": "handle",
            "documentation": "A DllCallback handle returned from DllCallbackRegister()."
        }]
    },
    "DllCallbackRegister": {
        "label": "DllCallbackRegister ( \"function\", \"return type\", \"params\" )",
        "documentation": "Creates a user-defined DLL Callback function.",
        "params": [{
            "label": "function",
            "documentation": "The name of the User Defined Function to call."
        }, {
            "label": "return type",
            "documentation": "The return type and calling convention of the function"
        }, {
            "label": "params",
            "documentation": "A semi-colon separated list of parameters that will be passed to this function."
        }]
    },
    "DllClose": {
        "label": "DllClose ( dllhandle )",
        "documentation": "Closes a previously opened DLL.",
        "params": [{
            "label": "dllhandle",
            "documentation": "The handle of a dll, as returned by a previous call to DllOpen()."
        }]
    },
    "DllOpen": {
        "label": "DllOpen ( \"filename\" )",
        "documentation": "Opens a DLL file for use in DllCall.",
        "params": [{
            "label": "filename",
            "documentation": "Filename of the DLL file to open."
        }]
    },
    "DllStructCreate": {
        "documentation": "Creates a C/C++ style structure to be used in DllCall.",
        "label": "DllStructCreate ( Struct [, Pointer] )",
        "params": [{
            "label": "Struct",
            "documentation": "A string representing the structure to create."
        }, {
            "label": "Pointer",
            "documentation": "[optional] If supplied the struct will not allocate memory but use the pointer supplied."
        }]
    },
    "DllStructGetData": {
        "documentation": "Returns the data of an element of the struct.",
        "label": "DllStructGetData ( Struct, Element [, index = Default] )",
        "params": [{
                "label": "Struct",
                "documentation": "The struct returned by DllStructCreate(). "
            }, {
                "label": "Element",
                "documentation": "Which element of the struct you want to access, starting at 1 or the element name as defined in DllStructCreate(). "
            },
            {
                "label": "index",
                "documentation": "[optional] For elements that are an array this specifies the 1-based index to retrieve. If omitted or the Default keyword then the entire array is retrieved (Useful for quickly retrieving strings). Not used for non-array elements. "
            }
        ]
    },
    "DllStructGetPtr": {
        "documentation": "Returns the pointer to the struct or an element in the struct.",
        "label": "DllStructGetPtr ( Struct [, Element] )",
        "params": [{
            "label": "Struct",
            "documentation": "The struct returned by DllStructCreate(). "
        }, {
            "label": "Element",
            "documentation": "[optional] The element of the struct whose pointer you need, starting at 1 or the element name as defined in DllStructCreate(). "
        }]
    },
    "DllStructGetSize": {
        "documentation": "Returns the size of the struct in bytes.",
        "label": "DllStructGetSize ( Struct )",
        "params": [{
            "label": "Struct",
            "documentation": "The struct returned by DllStructCreate()."
        }]
    },
    "DllStructSetData": {
        "documentation": "Sets the data of an element in the struct.",
        "label": "DllStructSetData ( Struct, Element, value [, index] )",
        "params": [{
            "label": "Struct",
            "documentation": "The struct returned by DllStructCreate(). "
        }, {
            "label": "Element",
            "documentation": "Which element of the struct you want to access, starting at 1, or the element name as defined in DllStructCreate(). "
        }, {
            "label": "value",
            "documentation": "The new value to place in the struct element. "
        }, {
            "label": "index",
            "documentation": "[optional] For elements that are an array this specifies the 1-based index to set. If omitted or the Default keyword then as much of the value as possible will be set in element starting at index 1 (Useful for quickly setting strings). Not used for non-array elements. "
        }]
    },
    "DriveGetDrive": {
        "documentation": "Returns an array containing the enumerated drives.",
        "label": "DriveGetDrive ( \"type\" )",
        "params": [{
            "label": "type",
            "documentation": "Type of drive to find"
        }]
    },
    "DriveGetFileSystem": {
        "documentation": "Returns File System Type of a drive.",
        "label": "DriveGetFileSystem ( \"path\" )",
        "params": [{
            "label": "path",
            "documentation": "Path of drive to receive information from. "
        }]
    },
    "DriveGetLabel": {
        "documentation": "Returns Volume Label of a drive, if it has one.",
        "label": "DriveGetLabel ( \"path\" )",
        "params": [{
            "label": "path",
            "documentation": "Path of drive to receive information from. "
        }]
    },
    "DriveGetSerial": {
        "documentation": "Returns Serial Number of a drive.",
        "label": "DriveGetSerial ( \"path\" )",
        "params": [{
            "label": "path",
            "documentation": "Path of drive to receive information from. "
        }]
    },
    "DriveGetType": {
        "documentation": "Returns drive type.",
        "label": "DriveGetType ( \"path\" [, operation = 1] )",
        "params": [{
            "label": "path",
            "documentation": "Path of drive to receive information from. "
        }, {
            "label": "operation",
            "documentation": "[optional] The drive type operation to perform."
        }]
    },
    "DriveMapAdd": {
        "documentation": "Maps a network drive.",
        "label": "DriveMapAdd ( \"device\", \"remote share\" [, flags = 0 [, \"user\" [, \"password\"]]] )",
        "params": [{
            "label": "device",
            "documentation": "The device to map, for example \"O:\" or \"LPT1:\". If you pass an empty string for this parameter a connection is made but not mapped to a specific drive. If you specify \"*\" an unused drive letter will be automatically selected. "
        }, {
            "label": "remote share",
            "documentation": "The remote share to connect to in the form \"\\\\server\\share\". "
        }, {
            "label": "flags",
            "documentation": "[optional] A combination of the following: $DMA_DEFAULT (0) = default; $DMA_PERSISTENT (1) = Persistent mapping; $DMA_AUTHENTICATION (8) = Show authentication dialog if required"
        }, {
            "label": "user",
            "documentation": "[optional] The username to use to connect. In the form \"username\" or \"domain\\username\". "
        }, {
            "label": "password",
            "documentation": "[optional] The password to use to connect. "
        }]
    },
    "DriveMapDel": {
        "documentation": "Disconnects a network drive.",
        "label": "DriveMapDel ( \"drive\" )",
        "params": [{
            "label": "drive",
            "documentation": "The device to disconnect, e.g. \"O:\" or \"LPT1:\". "
        }]
    },
    "DriveMapGet": {
        "documentation": "Retrieves the details of a mapped drive.",
        "label": "DriveMapGet ( \"device\" )",
        "params": [{
            "label": "device",
            "documentation": "The device (drive or printer) letter to query, e.g. \"O:\" or \"LPT1:\" "
        }]
    },
    "DriveSetLabel": {
        "documentation": "Sets the Volume Label of a drive.",
        "label": "DriveSetLabel ( \"path\", \"label\" )",
        "params": [{
            "label": "path",
            "documentation": "Path of drive to change. "
        }, {
            "label": "label",
            "documentation": "New volume label for the drive. (11 characters is usually max length) "
        }]
    },
    "DriveSpaceFree": {
        "documentation": "Returns the free disk space of a path in Megabytes.",
        "label": "DriveSpaceFree ( \"path\" )",
        "params": [{
            "label": "path",
            "documentation": "Path of drive to receive information from. "
        }]
    },
    "DriveSpaceTotal": {
        "documentation": "Returns the total disk space of a path in Megabytes.",
        "label": "DriveSpaceTotal ( \"path\" )",
        "params": [{
            "label": "path",
            "documentation": "Path of drive to receive information from. "
        }]
    },
    "DriveStatus": {
        "documentation": "Returns the status of the drive as a string.",
        "label": "DriveStatus ( \"path\" )",
        "params": [{
            "label": "path",
            "documentation": "Path of drive to receive information from. "
        }]
    },
    "EnvGet": {
        "documentation": "Retrieves an environment variable.",
        "label": "EnvGet ( \"envvariable\" )",
        "params": [{
            "label": "envvariable",
            "documentation": "Name of the environment variable to get such as \"TEMP\" or \"PATH\". "
        }]
    },
    "EnvSet": {
        "documentation": "Writes an environment variable.",
        "label": "EnvSet ( \"envvariable\" [, \"value\"] )",
        "params": [{
            "label": "envvariable",
            "documentation": "Name of the environment variable to set. "
        }, {
            "label": "value",
            "documentation": "[optional] Value to set the environment variable to. If a value is not used the environment variable will be deleted. "
        }]
    },
    "Eval": {
        "documentation": "Return the value of the variable defined by a string.",
        "label": "Eval ( string )",
        "params": [{
            "label": "string",
            "documentation": "string representing name of the variable. "
        }]
    },
    "Execute": {
        "documentation": "Execute an expression.",
        "label": "Execute ( string )",
        "params": [{
            "label": "string",
            "documentation": "string representing an expression to be evaluated. "
        }]
    },
    "Exp": {
        "documentation": "Calculates e to the power of a number.",
        "label": "Exp ( expression )",
        "params": [{
            "label": "expression",
            "documentation": "Any valid numeric expression. "
        }]
    },
    "FileChangeDir": {
        "documentation": "Changes the current working directory.",
        "label": "FileChangeDir ( \"path\" )",
        "params": [{
            "label": "path",
            "documentation": "The path to make the current working directory. "
        }]
    },
    "FileClose": {
        "documentation": "Closes a previously opened file.",
        "label": "FileClose ( \"filehandle\" )",
        "params": [{
            "label": "filehandle",
            "documentation": "The handle of a file, as returned by a previous call to FileOpen(). "
        }]
    },
    "FileCopy": {
        "documentation": "Copies one or more files.",
        "label": "FileCopy ( \"source\", \"dest\" [, flag = 0] )",
        "params": [{
            "label": "source",
            "documentation": "The source path of the file(s) to copy. (* and ? wildcards accepted - See Remarks) "
        }, {
            "label": "dest",
            "documentation": "The destination path of the copied file(s). "
        }, {
            "label": "flag",
            "documentation": "[optional] this flag determines whether to overwrite files if they already exist."
        }]
    },
    "FileCreateNTFSLink": {
        "documentation": "Creates an NTFS hardlink to a file or a directory.",
        "label": "FileCreateNTFSLink ( \"source\", \"hardlink\" [, flag = 0] )",
        "params": [{
            "label": "source",
            "documentation": "Path of the source to which the hardlink will be created. "
        }, {
            "label": "hardlink",
            "documentation": "Path of the hardlink. "
        }, {
            "label": "flag",
            "documentation": "[optional] this flag determines whether to overwrite link if they already exist."
        }]
    },
    "FileCreateShortcut": {
        "documentation": "Creates a shortcut (.lnk) to a file.",
        "label": "FileCreateShortcut ( \"file\", \"lnk\" [, \"workdir\" [, \"args\" [, \"desc\" [, \"icon\" [, \"hotkey\" [, icon number [, state]]]]]]] )",
        "params": [{
                "label": "file",
                "documentation": "Full path and file name of file to which the shortcut will point. "
            },
            {
                "label": "lnk",
                "documentation": "Full path and file name of the shortcut. "
            },
            {
                "label": "workdir",
                "documentation": "[optional] Working directory. "
            },
            {
                "label": "args",
                "documentation": "[optional] Additional file arguments. "
            },
            {
                "label": "desc",
                "documentation": "[optional] File Description. "
            },
            {
                "label": "icon",
                "documentation": "[optional] Full Path/File name of icon to use. "
            },
            {
                "label": "hotkey",
                "documentation": "[optional] Hotkey - same as the Send() key format. "
            },
            {
                "label": "icon number",
                "documentation": "[optional] The icon instance to use (usually 0) "
            },
            {
                "label": "state",
                "documentation": "[optional] The state the shortcut is launched in. Use either @SW_SHOWNORMAL, @SW_SHOWMINNOACTIVE or @SW_SHOWMAXIMIZED "
            }
        ]
    },
    "FileDelete": {
        "documentation": "Delete one or more files.",
        "label": "FileDelete ( \"filename\" )",
        "params": [{
            "label": "filename",
            "documentation": "The path of the file(s) to delete.  "
        }]
    },
    "FileExists": {
        "documentation": "Checks if a file or directory exists.",
        "label": "FileExists ( \"path\" )",
        "params": [{
            "label": "path",
            "documentation": "The directory or file to check. "
        }]
    },
    "FileFindFirstFile": {
        "documentation": "Creates a search handle, defined by a path and file mask.",
        "label": "FileFindFirstFile ( \"filename\" )",
        "params": [{
            "label": "filename",
            "documentation": "The path and file name. "
        }]
    },
    "FileFindNextFile": {
        "documentation": "Returns the next filename defined by the search handle.",
        "label": "FileFindNextFile ( search [, flag = 0])",
        "params": [{
                "label": "search",
                "documentation": "The search handle, as returned by FileFindFirstFile(). "
            },
            {
                "label": "flag",
                "documentation": "[optional] this flag determines whether to return detailed file attribute information in @extended. "
            }
        ]
    },
    "FileFlush": {
        "documentation": "Flushes the file's buffer to disk.",
        "label": "FileFlush ( \"filehandle\" )",
        "params": [{
            "label": "filehandle",
            "documentation": "The handle of a file, as returned by a previous call to FileOpen(). "
        }]
    },
    "FileGetAttrib": {
        "documentation": "Returns a code string representing a file's attributes.",
        "label": "FileGetAttrib ( \"filename\" )",
        "params": [{
            "label": "filename",
            "documentation": "The path to the file or directory to check. "
        }]
    },
    "FileGetEncoding": {
        "documentation": "Determines the text encoding used in a file.",
        "label": "FileGetEncoding ( \"filehandle/filename\" [, mode = 1] )",
        "params": [{
            "label": "filehandle/filename",
            "documentation": "The handle of a file, as returned by a previous call to FileOpen(). Alternatively you may use a string filename as the first parameter. "
        }, {
            "label": "mode",
            "documentation": "[optional] The UTF8 detection mode to use. "
        }]
    },
    "FileGetLongName": {
        "documentation": "Returns the long path+name of the path+name passed.",
        "label": "FileGetLongName ( \"filename\" [, flag = 0] )",
        "params": [{
            "label": "filename",
            "documentation": "Full path and file name to convert "
        }, {
            "label": "flag",
            "documentation": "[optional] $FN_FULLPATH (0) - Default; $FN_RELATIVEPATH (1) - file can have relative dir, e.g. \"..\file.txt\""
        }]
    },
    "FileGetPos": {
        "documentation": "Retrieves the current file position.",
        "label": "FileGetPos ( \"filehandle\" )",
        "params": [{
            "label": "filehandle",
            "documentation": "The handle of a file, as returned by a previous call to FileOpen(). "
        }]
    },
    "FileGetShortcut": {
        "documentation": "Retrieves details about a shortcut.",
        "label": "FileGetShortcut ( \"lnk\" )",
        "params": [{
            "label": "lnk",
            "documentation": "Full path and file name of the shortcut. "
        }]
    },
    "FileGetShortName": {
        "documentation": "Returns the 8.3 short path+name of the path+name passed.",
        "label": "FileGetShortName ( \"filename\" [, flag = 0] )",
        "params": [{
            "label": "filename",
            "documentation": "full path and file name to convert "
        }, {
            "label": "flag",
            "documentation": "[optional] $FN_FULLPATH (0) - Default; $FN_RELATIVEPATH (1) - file can have relative dir, e.g. \"..\file.txt\" "
        }]
    },
    "FileGetSize": {
        "documentation": "Returns the size of a file in bytes.",
        "label": "FileGetSize ( \"filename\" )",
        "params": [{
            "label": "filename",
            "documentation": "Filename to check. "
        }]
    },
    "FileGetTime": {
        "documentation": "Returns the time and date information for a file.",
        "label": "FileGetTime ( \"filename\" [, option = 0 [, format = 0]] )",
        "params": [{
            "label": "filename",
            "documentation": "The path to the file or directory to check. "
        }, {
            "label": "option",
            "documentation": "[optional] Flag to indicate which timestamp: $FT_MODIFIED (0) = Last modified (default); $FT_CREATED (1) = Created; $FT_ACCESSED (2) = Last accessed "
        }]
    },
    "FileGetVersion": {
        "documentation": "Returns version information stored in a file.",
        "label": "FileGetVersion ( \"filename\" [, \"stringname\"] )",
        "params": [{
            "label": "filename",
            "documentation": "Filename. "
        }, {
            "label": "stringname",
            "documentation": "[optional] Name of the string field to be retrieved from the header version file info: $FV_COMMENTS (\"Comments\"); $FV_COMPANYNAME (\"CompanyName\"); $FV_FILEDESCRIPTION (\"FileDescription\"); $FV_FILEVERSION (\"FileVersion\"); $FV_INTERNALNAME (\"InternalName\"); $FV_LEGALCOPYRIGHT (\"LegalCopyright\"); $FV_LEGALTRADEMARKS (\"LegalTrademarks\"); $FV_ORIGINALFILENAME (\"OriginalFilename\"); $FV_PRODUCTNAME (\"ProductName\"); $FV_PRODUCTVERSION (\"ProductVersion\"); $FV_PRIVATEBUILD (\"PrivateBuild\"); $FV_SPECIALBUILD (\"SpecialBuild\") "
        }]
    },
    "Send": {
        "label": "Send(\"keys\", flag = 0)",
        "params": [{
                "label": "\"keys\"",
                "documentation": "The sequence of keys to send."
            },
            {
                "label": "flag = 0",
                "documentation": "[optional] Changes how \"keys\" is processed"
            }
        ]
    }
}