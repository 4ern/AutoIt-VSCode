{
    "Abs": {
        "documentation": "Calculates the absolute value of a number.",
        "label": "Abs(expression)",
        "params": [{
            "label": "expression",
            "documentation": "Any valid numeric expression."
        }]
    },
    "ACos": {
        "documentation": "Calculates the arcCosine of a number.",
        "label": "ACos(expression)",
        "params": [{
            "label": "expression",
            "documentation": "Any value between -1 and 1 inclusive."
        }]
    },
    "AdlibRegister": {
        "documentation": "Registers an Adlib function.",
        "label": "AdlibRegister ( \"function\" [, time = 250] )",
        "params": [{
            "label": "\"function\"",
            "documentation": "The name of the adlib function to be registered."
        }, {
            "label": "time",
            "documentation": "[optional] how often in milliseconds to call the function. Default is 250 ms."
        }]
    },
    "AdlibUnRegister": {
        "documentation": "Registers an Adlib function.",
        "label": "AdlibUnRegister ( [\"function\"] )",
        "params": [{
            "label": "function",
            "documentation": "[optional] The name of the adlib function to be Unregistered. See remarks for more information."
        }]
    },
    "Asc": {
        "documentation": "Returns the unicode code of a character.",
        "label": "Asc ( \"char\" )",
        "params": [{
            "label": "char",
            "documentation": "The character to get the code for. If a string is used, the code for the first character is given."
        }]
    },
    "AscW": {
        "documentation": "Returns the ASCII code of a character.",
        "label": "AscW ( \"char\" )",
        "params": [{
            "label": "char",
            "documentation": "The character to get the code for. If a string is used, the code for the first character is given."
        }]
    },
    "ASin": {
        "label": "ASin(expression)",
        "documentation": "Calculates the arcsine of a number.",
        "params": [{
            "label": "expression",
            "documentation": "Any value between -1 and 1 (inclusive)."
        }]
    },
    "Assign": {
        "label": "Assign ( \"varname\", \"data\" [, flag = 0] )",
        "documentation": "Assigns a variable by name with the data.",
        "params": [{
            "label": "varname",
            "documentation": "The name of the variable you wish to assign. Cannot be an array element and must only contain letters, digits and underscore characters (as per normal variable naming conventions)."
        }, {
            "label": "data",
            "documentation": "The data you wish to assign to the variable."
        }, {
            "label": "flag",
            "documentation": "[optional] controls the way that variables are assigned"
        }]
    },
    "ATan": {
        "label": "ATan(expression)",
        "documentation": "Calculates the arctangent of a number.",
        "params": [{
            "label": "expression",
            "documentation": "Any valid numeric expression."
        }]
    },
    "AutoItSetOption": {
        "label": "AutoItSetOption ( \"option\" [, param] )",
        "documentation": "Changes the operation of various AutoIt functions/parameters.",
        "params": [{
            "label": "option",
            "documentation": "The option to change."
        }, {
            "label": "param",
            "documentation": "[optional] The value to assign to the option. The type and meaning vary by option. See remarks below. If the param is not provided, then the function just returns the value already assigned to the option. The keyword Default can be used for the parameter to reset the option to its default value."
        }]
    },
    "AutoItWinSetTitle": {
        "label": "AutoItWinSetTitle ( \"newtitle\" )",
        "documentation": "Changes the title of the AutoIt window.",
        "params": [{
            "label": "newtitle",
            "documentation": "The new title to give to the window."
        }]
    },
    "Beep": {
        "label": "Beep ( [Frequency = 500 [, Duration = 1000]] )",
        "documentation": "Plays back a beep to the user.",
        "params": [{
            "label": "Frequency",
            "documentation": "[optional] The frequency of the beep in hertz. Can be anywhere from 37 through 32,767 (0x25 through 0x7FFF). Default is 500 Hz."
        }, {
            "label": "Duration",
            "documentation": "[optional] The length of the beep in milliseconds. Default = 1000 ms."
        }]
    },
    "Binary": {
        "label": "Binary ( expression )",
        "documentation": "Returns the binary representation of an expression.",
        "params": [{
            "label": "expression",
            "documentation": "An expression to convert into binary/byte data."
        }]
    },
    "BinaryLen": {
        "label": "BinaryLen ( binary )",
        "documentation": "Returns the number of bytes in a binary variant.",
        "params": [{
            "label": "binary",
            "documentation": "The binary data to evaluate."
        }]
    },
    "BinaryMid": {
        "label": "BinaryMid ( binary, start [, count] )",
        "documentation": "Returns the number of bytes in a binary variant.",
        "params": [{
            "label": "binary",
            "documentation": "The binary data to evaluate."
        }, {
            "label": "start",
            "documentation": "The byte position to start. (1 = first byte)"
        }, {
            "label": "count",
            "documentation": "[optional] The number of bytes to extract. By default the entire remainder of the binary data."
        }]
    },
    "BinaryToString": {
        "label": "BinaryToString ( expression [, flag = 1] )",
        "documentation": "Converts a binary variant into a string.",
        "params": [{
            "label": "expression",
            "documentation": "An expression to convert into a string."
        }, {
            "label": "flag",
            "documentation": "[optional] Changes how the binary data is converted"
        }]
    },
    "BitAND": {
        "label": "BitAND (value1, value2 [, value n])",
        "documentation": "Performs a bitwise AND operation.",
        "params": [{
            "label": "value1",
            "documentation": "The first number."
        }, {
            "label": "value2",
            "documentation": "The second number."
        }, {
            "label": "value n",
            "documentation": "[optional] The nth number - up to 255 values can be specified."
        }]
    },
    "BitNOT": {
        "label": "BitNOT ( value )",
        "documentation": "Performs a bitwise NOT operation.",
        "params": [{
            "label": "value",
            "documentation": "The number to operate on."
        }]
    },
    "BitOR": {
        "label": "BitOR ( value1, value2 [, value n] )",
        "documentation": "Performs a bitwise OR operation.",
        "params": [{
            "label": "value1",
            "documentation": "The first number."
        }, {
            "label": "value2",
            "documentation": "The second number."
        }, {
            "label": "value n",
            "documentation": "[optional] The nth number - up to 255 values can be specified."
        }]
    },
    "BitRotate": {
        "label": "BitRotate ( value [, shift = 1 [, size = \"W\"]] )",
        "documentation": "Performs a bitwise OR operation.",
        "params": [{
            "label": "value",
            "documentation": "The number to be operated on."
        }, {
            "label": "shift",
            "documentation": "[optional] Number of bits to rotate to the left (negative numbers rotate right). If not given, the default is 1."
        }, {
            "label": "size",
            "documentation": "[optional] A string that determines the rotation size, the default is (16 bits). "
        }]
    },
    "BitShift": {
        "label": "BitShift ( value, shift )",
        "documentation": "Performs a bit shifting operation.",
        "params": [{
            "label": "value",
            "documentation": "The number to be shifted."
        }, {
            "label": "shift",
            "documentation": "Number of bits to shift to the right (negative numbers shift left)."
        }]
    },
    "BitXOR": {
        "label": "BitXOR ( value1, value2 [, value n] )",
        "documentation": "Performs a bitwise exclusive OR (XOR) operation.",
        "params": [{
            "label": "value1",
            "documentation": "The first number."
        }, {
            "label": "value2",
            "documentation": "The second number."
        }, {
            "label": "value n",
            "documentation": "[optional] The nth number - up to 255 values can be specified."
        }]
    },
    "BlockInput": {
        "label": "BlockInput ( flag )",
        "documentation": "Disable/enable the mouse and keyboard.",
        "params": [{
            "label": "flag",
            "documentation": "$BI_DISABLE (1) = Disable user input / $BI_ENABLE (0) = Enable user input"
        }]
    },
    "Break": {
        "label": "Break ( mode )",
        "params": [{
            "label": "mode",
            "documentation": "Sets the script break mode: $BREAK_ENABLE (1) = Break is enabled (user can quit) (default) / $BREAK_DISABLE (0) = Break is disabled (user cannot quit)"
        }]
    },
    "Call": {
        "label": "Call ( \"function\" [, paramN] )",
        "documentation": "Calls a user-defined or built-in function contained in first parameter.",
        "params": [{
                "label": "function",
                "documentation": "The name of function or function to call."
            },
            {
                "label": "paramN",
                "documentation": "Argument(s) that will be passed to the function being invoked."
            }
        ]
    },
    "CDTray": {
        "label": "CDTray ( \"drive\", \"status\" )",
        "documentation": "Opens or closes the CD tray.",
        "params": [{
                "label": "drive",
                "documentation": "The drive letter of the CD tray to control, in the format D:, E:, etc."
            },
            {
                "label": "status",
                "documentation": "Specifies if you want the CD tray to be open or closed"
            }
        ]
    },
    "Ceiling": {
        "label": "Ceiling ( expression )",
        "documentation": "Returns a number rounded up to the next integer.",
        "params": [{
            "label": "expression",
            "documentation": "Any valid numeric expression."
        }]
    },
    "Chr": {
        "label": "Chr ( ASCIIcode )",
        "documentation": "Returns a character corresponding to an ASCII code.",
        "params": [{
            "label": "ASCIIcode",
            "documentation": "An ASCII code in the range 0-255 (e.g., 65 returns the capital letter A)."
        }]
    },
    "ChrW": {
        "label": "ChrW ( UNICODEcode  )",
        "documentation": "Returns a character corresponding to a unicode code.",
        "params": [{
            "label": "UNICODEcode",
            "documentation": "A unicode code in the range 0-65535 (e.g., 65 returns the capital letter A)."
        }]
    },
    "ClipPut": {
        "label": "ClipPut(\"value\")",
        "params": [{
            "label": "\"value\"",
            "documentation": "The text to write to the clipboard."
        }]
    },
    "ConsoleRead": {
        "label": "ConsoleRead ( [peek = False [, binary = False]] )",
        "documentation": "Read from the STDIN stream of the AutoIt script process.",
        "params": [{
            "label": "peek",
            "documentation": "[optional] If True the function does not remove the read characters from the stream."
        }, {
            "label": "binary",
            "documentation": "[optional] If True the function reads the data as binary instead of text (default is text)."
        }]
    },
    "ConsoleWrite": {
        "label": "ConsoleWrite ( \"data\" )",
        "documentation": "Writes data to the STDOUT stream. Some text editors can read this stream as can other programs which may be expecting data on this stream.",
        "params": [{
            "label": "data",
            "documentation": "The data you wish to output. This may either be text or binary."
        }]
    },
    "ConsoleWriteError": {
        "label": "ConsoleWriteError ( \"data\" )",
        "documentation": "Writes data to the STDERR stream. Some text editors can read this stream as can other programs which may be expecting data on this stream.",
        "params": [{
            "label": "data",
            "documentation": "The data you wish to output. This may either be text or binary."
        }]
    },
    "ControlClick": {
        "label": "ControlClick ( \"title\", \"text\", controlID [, button = \"left\" [, clicks = 1 [, x [, y]]]] )",
        "documentation": "Sends a mouse click command to a given control.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }, {
            "label": "button",
            "documentation": "[optional] The button to click, \"left\", \"right\", \"middle\", \"main\", \"menu\", \"primary\", \"secondary\". Default is the left button."
        }, {
            "label": "clicks",
            "documentation": "[optional] The number of times to click the mouse. Default is 1."
        }, {
            "label": "x",
            "documentation": "[optional] The x position to click within the control. Default is center."
        }, {
            "label": "y",
            "documentation": "[optional] The y position to click within the control. Default is center."
        }]
    },
    "ControlCommand": {
        "label": "ControlCommand ( \"title\", \"text\", controlID, \"command\" [, \"option\"] )",
        "documentation": "Sends a command to a control.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }, {
            "label": "command",
            "documentation": "The command to send to the control."
        }, {
            "label": "option",
            "documentation": "[optional] Additional parameter required by some commands."
        }]
    },
    "ControlDisable": {
        "label": "ControlDisable ( \"title\", \"text\", controlID )",
        "documentation": "Disables or \"grays-out\" a control.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }]
    },
    "ControlEnable": {
        "label": "ControlEnable ( \"title\", \"text\", controlID )",
        "documentation": "Enables a \"grayed-out\" control.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }]
    },
    "ControlFocus": {
        "label": "ControlFocus ( \"title\", \"text\", controlID )",
        "documentation": "Sets input focus to a given control on a window.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }]
    },
    "ControlGetFocus": {
        "label": "ControlGetFocus ( \"title\" [, \"text\"] )",
        "documentation": "Returns the ControlRef# of the control that has keyboard focus within a specified window.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "[optional] The text of the window to access."
        }]
    },
    "ControlGetHandle": {
        "label": "ControlGetHandle ( \"title\", \"text\", controlID )",
        "documentation": "Retrieves the internal handle of a control.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }]
    },
    "ControlGetPos": {
        "label": "ControlGetPos ( \"title\", \"text\", controlID )",
        "documentation": "Retrieves the position and size of a control relative to its window.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }]
    },
    "ControlGetText": {
        "label": "ControlGetText ( \"title\", \"text\", controlID )",
        "documentation": "Retrieves text from a control.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }]
    },
    "ControlHide": {
        "label": "ControlHide ( \"title\", \"text\", controlID )",
        "documentation": "Hides a control.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }]
    },
    "ControlListView": {
        "label": "ControlListView ( \"title\", \"text\", controlID, \"command\" [, option1 [, option2]] )",
        "documentation": "Sends a command to a ListView32 control.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }, {
            "label": "command",
            "documentation": "The command to send to the control."
        }, {
            "label": "option1",
            "documentation": "[optional] Additional parameter required by some commands."
        }, {
            "label": "option2",
            "documentation": "[optional] Additional parameter required by some commands."
        }]
    },
    "ControlMove": {
        "label": "ControlMove ( \"title\", \"text\", controlID, x, y [, width [, height]] )",
        "documentation": "Moves a control within a window.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }, {
            "label": "x",
            "documentation": "X coordinate to move to relative to the window client area."
        }, {
            "label": "y",
            "documentation": "Y coordinate to move to relative to the window client area."
        }, {
            "label": "width",
            "documentation": "[optional] New width of the window."
        }, {
            "label": "height",
            "documentation": "[optional] New height of the window."
        }]
    },
    "ControlSend": {
        "label": "ControlSend ( \"title\", \"text\", controlID, \"string\" [, flag = 0] )",
        "documentation": "Sends a string of characters to a control.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }, {
            "label": "string",
            "documentation": "String of characters to send to the control."
        }, {
            "label": "flag",
            "documentation": "[optional] Changes how \"keys\" is processed"
        }]
    },
    "ControlSetText": {
        "label": "ControlSetText  ( \"title\", \"text\", controlID, \"new text\" [, flag = 0] )",
        "documentation": "Sets text of a control.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }, {
            "label": "new text",
            "documentation": "The new text to be set into the control."
        }, {
            "label": "flag",
            "documentation": "[optional] when different from 0 (default) will force the target window to be redrawn."
        }]
    },
    "ControlShow": {
        "label": "ControlShow ( \"title\", \"text\", controlID )",
        "documentation": "Shows a control that was hidden.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }]
    },
    "ControlTreeView": {
        "label": "ControlTreeView ( \"title\", \"text\", controlID, \"command\" [, option1] )",
        "documentation": "Sends a command to a TreeView32 control.",
        "params": [{
            "label": "title",
            "documentation": "The title/hWnd/class of the window to access."
        }, {
            "label": "text",
            "documentation": "The text of the window to access."
        }, {
            "label": "controlID",
            "documentation": "The control to interact with."
        }, {
            "label": "command",
            "documentation": "The command to send to the control."
        }, {
            "label": "option1",
            "documentation": "[optional] Additional parameter required by some commands."
        }]
    },
    "Send": {
        "label": "Send(\"keys\", flag = 0)",
        "params": [{
                "label": "\"keys\"",
                "documentation": "The sequence of keys to send."
            },
            {
                "label": "flag = 0",
                "documentation": "[optional] Changes how \"keys\" is processed"
            }
        ]
    }
}